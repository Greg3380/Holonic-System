package pl.edu.agh.agentsystem.^agent

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import pl.edu.agh.agentsystem.^event.ProductParameters
import pl.edu.agh.agentsystem.^event.ExchangeParameters
import pl.edu.agh.agentsystem.^agent.jobholon.Refinement
import pl.edu.agh.agentsystem.^agent.jobholon.CoolingAgent
import io.sarl.core.Behaviors
import io.sarl.core.Lifecycle
import io.sarl.core.InnerContextAccess
import pl.edu.agh.agentsystem.utils.AgentType

agent ProductSupervisor {
	uses Logging, Behaviors, Lifecycle, InnerContextAccess

	on Initialize {
		info("The agent was ProductSupervisor started.")
	}

	on ProductParameters {
		info("Received production parameters.")
		var params = occurrence
		establishCooperation(params)
		var exchangeParams = prepareExchangeParams(occurrence)
		spawnInContext(typeof(Refinement), getInnerContext)
		spawnInContext(typeof(CoolingAgent), getInnerContext)
		wake(exchangeParams)
	}
	
	def prepareExchangeParams(parameters : ProductParameters) {
		return new ExchangeParameters(parameters, 0, 0, 0, 0, AgentType.REFINEMENT)
	}

	on Destroy {
		info("The agent was stopped.")
	}
	def establishCooperation(params: ProductParameters) {
	}
}
