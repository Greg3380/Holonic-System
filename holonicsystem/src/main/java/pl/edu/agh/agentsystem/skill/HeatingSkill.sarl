package pl.edu.agh.agentsystem.^skill

import io.sarl.core.Logging
import pl.edu.agh.agentsystem.^capacity.Heating
import pl.edu.agh.agentsystem.^event.ExchangeParameters
import pl.edu.agh.agentsystem.utils.ChemicalElement
import java.util.Map
import pl.edu.agh.agentsystem.utils.ElementToMeltingTemp
import pl.edu.agh.agentsystem.utils.AgentType
import pl.edu.agh.agentsystem.^agent.operationholon.FurnanceAgent
import pl.edu.agh.agentsystem.^agent.ResourceSupervisor

skill HeatingSkill implements Heating {
	uses Logging

	def install {
		// Function invoked when the skill is installed in the owner.
		// You should put all the initialization statements in this block of code.
		info("Installing the skill")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner.
		// You should put all the resource release statements in this block of code.
		info("Uninstalling the skill")
	}
	
	def heat(exchangeParameters : ExchangeParameters) : ExchangeParameters {
		
		var furnance = ResourceSupervisor.getFurnanceAgent()
		
		var temp = calculateTime(exchangeParameters.productParameters.totalWeight,
			exchangeParameters.productParameters.compositionOfTheProduct,
			exchangeParameters.temperature);
			
		return new ExchangeParameters(exchangeParameters.productParameters, exchangeParameters.alloyStrength,
			exchangeParameters.alloyExtensibility, Math.round(temp), exchangeParameters.time,
			AgentType.REFINEMENT)
	}
	
	def calculateTime(weight : float, alloyComposition: Map<ChemicalElement, Float>, temperature: int) : float {
		
		var maxTemp = temperature;
		
		var alloyCompEntrySet = alloyComposition.entrySet();
		
		for(var i = 0; i < alloyComposition.size; i++) {
			maxTemp = Math.max(maxTemp, Math.round(ElementToMeltingTemp.getMeltingTemperature(alloyCompEntrySet.get(i).key)))
			
		}
		
		return maxTemp;
		
	}
	
}
